#Tested on 10.7.5 and 10.10.4
#for Yosemite use ACPIBatteryManager.kext + this DSDT patch

# remove WMI related items; makes it easier to patch battery EC
into device label WMID remove_entry;
into device label WLBU remove_entry;
into method label CHWL code_regex \(\^WMID\.[^\)].*\) replaceall_matched begin (Zero) end;
into method label _PTS code_regex \\_SB\.WMID\.ESDT\s+\(\) remove_matched;
into method label PFUN code_regex \^\^\^\^WMID\.SWDS\s+\(0x01FF0000\) remove_matched;
into method label _Q40 remove_entry;
into method label _Q42 remove_entry;

#16 bit Method
into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized) { Return(Or(Arg0, ShiftLeft(Arg1, 8))) }\n
end;

#16 bit Rename
into device label EC0 code_regex MUAC,\s+16, replace_matched begin UAC0,8,UAC1,8, end;
into device label EC0 code_regex ATTE,\s+16, replace_matched begin TTE0,8,TTE1,8, end;
into device label EC0 code_regex RTTE,\s+16, replace_matched begin TTE2,8,TTE3,8, end;
into device label EC0 code_regex ATTF,\s+16, replace_matched begin TTF0,8,TTF1,8, end;
into device label EC0 code_regex ERIB,\s+16, replace_matched begin RIB0,8,RIB1,8, end;

#16 bit Functions
into method label BATT code_regex \(\^\^PCI0.LPCB.EC0.MUAC, replaceall_matched begin (B1B2(\^\^PCI0.LPCB.EC0.DC00,^\^PCI0.LPCB.EC0.DC01), end;
into method label BATT code_regex \(\^\^PCI0.LPCB.EC0.ATTE, replaceall_matched begin (B1B2(\^\^PCI0.LPCB.EC0.TTE0,^\^PCI0.LPCB.EC0.TTE1), end;
into method label BATT code_regex \(\^\^PCI0.LPCB.EC0.RTTE, replaceall_matched begin (B1B2(\^\^PCI0.LPCB.EC0.TTE2,^\^PCI0.LPCB.EC0.TTE3), end;
into method label BATT code_regex \(\^\^PCI0.LPCB.EC0.ATTF, replaceall_matched begin (B1B2(\^\^PCI0.LPCB.EC0.TTF0,^\^PCI0.LPCB.EC0.TTF1), end;
into method label FANG code_regex Store\s+\(Arg0,\s+ERIB\) replace_matched 
begin
Store(Arg0, RIB0) Store(ShiftRight(Arg0, 8), RIB1)
end;
into method label FANW code_regex Store\s+\(Arg0,\s+ERIB\) replace_matched
begin
Store(Arg0, RIB0) Store(ShiftRight(Arg0, 8), RIB1)
end;

# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

into method label WE1B parent_label EC0 remove_entry;
into method label WECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;

# deal with 256-bit SMD0
into device label EC0 code_regex SMD0,\s+256 replace_matched begin SDXX,256 end;
into device label EC0 insert begin Method (RSMD, 0, Serialized) { Return (RECB(0x64, 256)) } end;
into device label EC0 insert begin Method (WSMD, 1, Serialized) { WECB(0x64, 256, Arg0) } end;
into method label ESMR code_regex Store\s+\((.*),\s+\^\^LPCB\.EC0\.SMD0\) replaceall_matched begin ^^LPCB.EC0.WSMD(%1) end;
into method label ESMR code_regex \(\^\^LPCB\.EC0\.SMD0\, replaceall_matched begin (^^LPCB.EC0.RSMD(), end;
into method label ESMW code_regex Store\s+\((.*),\s+\^\^LPCB\.EC0\.SMD0\) replaceall_matched begin ^^LPCB.EC0.WSMD(%1) end;
into method label CFUN code_regex Store\s+\((.*),\s+SMD0\) replaceall_matched begin WSMD(%1) end;
into method label CFUN code_regex \(SMD0\, replaceall_matched begin (RSMD(), end;

# deal with 64-bit BTDC
into device label EC0 code_regex BTDC,\s+64 replace_matched begin TDCX,64 end;
into device label EC0 insert begin Method (RTDC, 0, Serialized) { Return(RECB(0x88, 64)) } end;
into method label GUBT code_regex \(BTDC, replaceall_matched begin (RTDC(), end;
into method label BATT code_regex \(\^\^PCI0\.LPCB\.EC0\.BTDC, replaceall_matched begin (^^PCI0.LPCB.EC0.RTDC(), end;

# deal with 72-bit BMNN
into device label EC0 code_regex BMNN,\s+72 replace_matched begin MNNX,72 end;
into device label EC0 insert begin Method (RMNN, 0, Serialized) { Return(RECB(0x90, 72)) } end;
into method label GUBI code_regex \(BMNN, replaceall_matched begin (RMNN(), end;
into method label BATT code_regex \(\^\^PCI0\.LPCB\.EC0\.BMNN, replaceall_matched begin (^^PCI0.LPCB.EC0.RMNN(), end;

# deal with 56-bit BDVN
into device label EC0 code_regex BDVN,\s+56 replace_matched begin DVNX,56 end;
into device label EC0 insert begin Method (RDVN, 0, Serialized) { Return(RECB(0x99, 56)) } end;
into method label GBMN code_regex \(BDVN, replaceall_matched begin (RDVN(), end;
into method label BATT code_regex \(\^\^PCI0\.LPCB\.EC0\.BDVN, replaceall_matched begin (^^PCI0.LPCB.EC0.RDVN(), end;

# deal with 128-bit BCTL
into device label EC0 code_regex BCTL,\s+128 replace_matched begin CTLX,128 end;
into device label EC0 insert begin Method (RCTL, 0, Serialized) { Return(RECB(0x2D, 128)) } end;i
into method label BATT code_regex \(\^\^PCI0\.LPCB\.EC0\.BCTL, replaceall_matched begin (^^PCI0.LPCB.EC0.RCTL(), end;
